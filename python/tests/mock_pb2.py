# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: mock.proto
# Protobuf Python Version: 5.29.0
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import runtime_version as _runtime_version
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
_runtime_version.ValidateProtobufRuntimeVersion(
    _runtime_version.Domain.PUBLIC,
    5,
    29,
    0,
    '',
    'mock.proto'
)
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\nmock.proto\x12\tmockproto\"\xcb\x02\n\x0bMockPayload\x12\r\n\x05width\x18\x01 \x01(\x05\x12\x0e\n\x06height\x18\x02 \x01(\x03\x12\x12\n\nconfidence\x18\x03 \x01(\x02\x12\x13\n\x0btemperature\x18\x04 \x01(\x01\x12\x10\n\x08is_valid\x18\x05 \x01(\x08\x12\r\n\x05label\x18\x06 \x01(\t\x12\x12\n\nimage_data\x18\x07 \x01(\x0c\x12\x0e\n\x06points\x18\x08 \x03(\x05\x12-\n\x04tags\x18\t \x03(\x0b\x32\x1f.mockproto.MockPayload.Metadata\x12-\n\x06status\x18\n \x01(\x0e\x32\x1d.mockproto.MockPayload.Status\x1a&\n\x08Metadata\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t\")\n\x06Status\x12\x0b\n\x07UNKNOWN\x10\x00\x12\x06\n\x02OK\x10\x01\x12\n\n\x06\x46\x41ILED\x10\x02\x62\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'mock_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  DESCRIPTOR._loaded_options = None
  _globals['_MOCKPAYLOAD']._serialized_start=26
  _globals['_MOCKPAYLOAD']._serialized_end=357
  _globals['_MOCKPAYLOAD_METADATA']._serialized_start=276
  _globals['_MOCKPAYLOAD_METADATA']._serialized_end=314
  _globals['_MOCKPAYLOAD_STATUS']._serialized_start=316
  _globals['_MOCKPAYLOAD_STATUS']._serialized_end=357
# @@protoc_insertion_point(module_scope)
